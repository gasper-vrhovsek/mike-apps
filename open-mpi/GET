#!/bin/sh

# exit on error
set -e

VERSION='v1.10.2a2-osv-port'  # dcccfbb2
BASEDIR="$PWD"
SRCDIR="$BASEDIR/ompi-release"

CONFIGURE_FLAGS=""
DISTRO_NAME=`python -c 'import platform; pp=platform.linux_distribution(); str="%s-%s" % (pp[0], pp[1]); str=str.replace(" ", "-").lower(); print(str); '`
if [ "$mode" = "debug" ]; then
    CONFIGURE_FLAGS="--enable-debug"
    BUILD_DIR="build-osv-debug-$DISTRO_NAME"
else  # release
    CONFIGURE_FLAGS="--with-platform=optimized"
    BUILD_DIR="build-osv-release-$DISTRO_NAME"
fi
echo "Using Open MPI CONFIGURE_FLAGS=$CONFIGURE_FLAGS"

# enable parallel build
export MAKEFLAGS="-j `nproc`"

if [ ! -d ompi-release ]; then
    # Checkout code
    git clone --depth 1 --branch $VERSION https://github.com/mikelangelo-project/ompi-release.git
fi


mkdir -p $HOME/openmpi-bin
if [ ! -f ompi-release/$BUILD_DIR/AAA-build-ok ]
then
    # Configure and compile
    export AUTOMAKE_JOBS=`nproc`
    (cd ompi-release && ./autogen.pl)
    #
    mkdir -p ompi-release/$BUILD_DIR
    cd ompi-release/$BUILD_DIR
    #
    # OSv chrashes at VM termination if SYSV shmem is used. Disable it until fixed.
    # Otherwise, SYSV shmem seems to work.
    # See https://github.com/cloudius-systems/osv/issues/755.
    ../configure --prefix=$HOME/openmpi-bin --disable-dlopen \
        --disable-oshmem --disable-posix-shmem \
        --disable-sysv-shmem \
        CFLAGS="-fPIC -DPIC" --disable-pty-support --disable-vt \
        --enable-static --enable-shared $CONFIGURE_FLAGS
    make -j `nproc`
    chmod a+x ../make-orted-so.sh  # TODO fix git
    ../make-orted-so.sh

    # No need to install Open MPI to get it compiled for OSv.
    # But mpicc is needed to compile OpenFOAM, so we install it anyway.
    #
    # To compile OpenFOAM, it would be enough to install system supplied
    # Open MPI, but then a simple 'mpirun ...' would use wrong binary.
    # This would require additional messing with PATH/LD_LIBRARY_PATH.
    make install  # safe with -prefix=$HOME/openmpi-bin
    # add to $PATH, $LD_LIBRARY_PATH ...
    if [ -z "`cat ~/.bashrc | grep 'MAGIC LINE mike-apps open-mpi included'`" ]; then
        cat <<EOF >> ~/.bashrc

# MAGIC LINE mike-apps open-mpi included : OSv mike-apps openmpi bin/libs
export PATH=$HOME/openmpi-bin/bin:\$PATH
export LD_LIBRARY_PATH=$HOME/openmpi-bin/lib:\$LD_LIBRARY_PATH

EOF
    fi
    date >> AAA-build-ok
fi


echo "
/usr/lib/libibverbs.so.1:   /usr/lib/libibverbs.so.1
/usr/lib/libmpi.so.12:      ${SRCDIR}/$BUILD_DIR/ompi/.libs/libmpi.so.12
/usr/lib/libmpi.so.1:       ${SRCDIR}/$BUILD_DIR/ompi/.libs/libmpi.so.12
/usr/lib/libopen-pal.so.13: ${SRCDIR}/$BUILD_DIR/opal/.libs/libopen-pal.so.13
/usr/lib/libopen-rte.so.12: ${SRCDIR}/$BUILD_DIR/orte/.libs/libopen-rte.so.12
/usr/lib/libmpi_cxx.so.1:   ${SRCDIR}/$BUILD_DIR/ompi/mpi/cxx/.libs/libmpi_cxx.so.1
/usr/lib/orted.so:          ${SRCDIR}/$BUILD_DIR/orte/tools/orted/.libs/orted.so
/usr/lib/orterun.so:        ${SRCDIR}/$BUILD_DIR/orte/tools/orterun/.libs/orterun.so
/usr/bin/mpirun:            ->/usr/lib/orterun.so

/usr/local/share/openmpi/help-opal-shmem-mmap.txt: ${SRCDIR}/opal/mca/shmem/mmap/help-opal-shmem-mmap.txt
" > "$BASEDIR/usr.manifest"
